inset('modint.type')
extern all: [call]
data DOUBLE

def init():
    self.DOUBLE = create('jacobian_double.se')

def call(m_axn, m_axd, m_ayn, m_ayd, m_bxn, m_bxd, m_byn, m_byd):
    if !m_axn and !m_ayn:
        o = [m_bxn, m_bxd, m_byn, m_byd]
    if !m_bxn and !m_byn:
        o = [m_axn, m_axd, m_ayn, m_ayd]
    if o:
        return(o, 4)
    with P_______P = -4294968273:
        if m_axn * m_bxd - m_axd * m_bxn == m(0):
            if m_ayn * m_byd - m_ayd * m_byn == m(0):
                return(self.DOUBLE.call(m_axn, m_axd, m_ayn, m_ayd, outsz=4), 4)
            else:
                return([0, 1, 0, 1], 4)
        with m_mn = (m_byn * m_ayd - m_ayn * m_byd) * m_axd * m_bxd:
            with m_md = m_byd * m_ayd * (m_bxn * m_axd - m_axn * m_bxd):
                with m_msqn = m_mn * m_mn:
                    with m_msqd = m_md * m_md:
                        with m_msqman = m_msqn * m_axd - m_msqd * m_axn:
                            with m_msqmad = m_msqd * m_axd:
                                with m_xn = m_msqman * m_bxd - m_msqmad * m_bxn:
                                    with m_xd = m_msqmad * m_bxd:
                                        with m_mamxn = m_mn * (m_axn * m_xd - m_xn * m_axd):
                                            with m_mamxd = m_md * m_axd * m_xd:
                                                with m_yn = m_mamxn * m_ayd - m_mamxd * m_ayn:
                                                    with m_yd = m_mamxd * m_ayd:
                                                        return([m_xn, m_xd, m_yn, m_yd], 4)
